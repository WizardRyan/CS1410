12.2 -
	It is illegal to advance an iterator past the beginning and end of the list, as it'll throw an error
	if you try to dereference a null pointer, to work around that, have it set the iterator
	to the beginning or end of the list, depending on which bound you passed.

12.3 - 
	void printAllValues (list<int> values){
		list<int>::iterator pos;
		for(pos = values.end(); pos != values.begin(); pos--){
			cout << *pos << endl;
		}
	     }
 
12.5 - 
	declare a list containing nodes that point to strings
	declare an an iterator for that list that starts at the beginning
	insert a new node before the beginning of the list, that points to value "Tom"
	the iterator now points at the beginning of the list again
	insert another node before the beginning of the list, "Dick"
	move the iterator's postion one down the list
	insert a node after Dick, before Tom, pointing to the value "Harry"
	set the iterator to the beginning of the list, while the iterator hasn't reached the end, increment it by one
	while above condition, print the value stored in the node that the current iterator is pointing to

12.12 -
	inserting an element into the middle of a list is faster than a vector, compare these two scenarios:
	
	you insert an element into the middle of the list. To do this, you change the previous node
	to point the node you are currently entering. Then, change the entered
	node to point to the next node.
	O(1)

	you insert an element into the middle (or beginning) of a vector. You move each element up by one to accomodate the new element.
	O(n)